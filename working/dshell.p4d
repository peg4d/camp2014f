
// ##############################
// ##     lexer definition     ##
// ##############################

// key word definition
"as"          = 'as'          !W
"assert"      = 'assert'      !W
"boolean"     = 'boolean'     !W
"break"       = 'break'       !W
"catch"       = 'catch'       !W
"class"       = 'class'       !W
"continue"    = 'continue'    !W
"constructor" = 'constructor' !W
"do"          = 'do'          !W
"else"        = 'else'        !W
"extends"     = 'extends'     !W
"export-env"  = 'export-env'  !W
"finally"     = 'finally'     !W
"float"       = 'float'       !W
"for"         = 'for'         !W
"Func"        = 'Func'        !W
"function"    = 'function'    !W
"if"          = 'if'          !W
"import-env"  = 'import-env'  !W
"in"          = 'in'          !W
"int"         = 'int'         !W
"is"          = 'is'          !W
"let"         = 'let'         !W
"new"         = 'new'         !W
"not"         = 'not'         !W
"return"      = 'return'      !W
"trace"       = 'trace'       !W
"try"         = 'try'         !W
"throw"       = 'throw'       !W
"var"         = 'var'         !W
"void"        = 'void'        !W
"while"       = 'while'       !W

"+"           = '+' ![+=]
"-"           = '-' ![-=]

// literal
// integer literal
INT_LITERAL
	= { NUMBER #Integer } !'.'

NUMBER
	= '0'
	/ [1-9][0-9]*

DIGIT
	= [0-9]

// float literal
FLOAT_LITERAL
	= { NUMBER '.' DIGIT+ FLOAT_SUFFIX? #Float }

FLOAT_SUFFIX
	= [eE] [+-]? DIGIT+

// boolean literal
BOOLEAN_LITERAL
	= { '$true' #True }  !W
	/ { '$false' #False } !W

// String literal
STRING_LITERAL
	= { ['] SINGLE_QUOTE_STRING_CHAR* ['] #String }

SINGLE_QUOTE_STRING_CHAR
	= ![\r\n'\\] .
	/ SINGLE_ESCAPE_SEQUENCE

SINGLE_ESCAPE_SEQUENCE
	= '\\' [btnfr'\\]

// variable or function name
APPLIED_NAME
	= '$' PERMITTED_NAME

SPECIAL_NAME
	= '$' SPECIAL_NAMES

SPECIAL_NAMES
	= { '@' #Name }

// command literal
BACKQUOTE_LITERAL
	= '`' BACKQUOTE_CHAR+ '`'

BACKQUOTE_CHAR
	= '\\' '`'
	/ ![`\n\r] .

// command
COMMAND
	={  COMMAND_START_CHAR COMMAND_CHAR* #Name }

COMMAND_CHAR
	= '\\'
	/ ![ \t\r\n;'"`|&<>(){}$#!\[\]] .

COMMAND_START_CHAR
	= '\\'
	/ ![ \t\r\n;'"`|&<>(){}$#!\[\]0-9+-] .

// operator
"*" = '*' !'='
"/" = '/' !'='
"%" = '%' !'='
"<" = '<' !'='
">" = '>' !'='

"&" = '&' !'&'
"|" = '|' !'|'

"=" = '=' !'='

// identifier
IDENTIFIER
	= PERMITTED_NAME

// line end
LINE_END
	= ';' [ \t\r\n]*

NEW_LINE
	= [\r\n] [ \t\r\n]*

// comment and space
COMMENT
	= '#' (![\r\n] .)*

WHITE_SPACE
	= WHITE_SPACE_FLAGMENT+

WHITE_SPACE_FLAGMENT
	= '\\' [\r\n]
	/ [ \t]

// mode NameMode
RESERVED_NAME
	= 'this'
	/ 'super'
	/ 'true'
	/ 'false'

VAR_NAME
	= PERMITTED_NAME

PERMITTED_NAME
	= { !RESERVED_NAME [a-zA-Z] [_0-9a-zA-Z]* #Name }
	/ { '_' [_0-9a-zA-z]+ #Name }

// mode DoubleQuoteStringMode
STRING_ELEMENT
	= { DOUBLE_QUOTE_STRING_CHAR+ #String }

DOUBLE_QUOTE_STRING_CHAR
	= ![\r\n`$"\\] .
	/ DOUBLE_QUOTE_ESCAPE_SEQUENCE

DOUBLE_QUOTE_ESCAPE_SEQUENCE
	= '\\' [$btnfr"`\\]

INNER_BOOLEAN
	= BOOLEAN_LITERAL
	/ { '${true}' #True }
	/ { '${false}' #False }

INNER_NAME
	= APPLIED_NAME
	/ '${' PERMITTED_NAME '}'

INNER_SPECIAL_NAME
	= SPECIAL_NAME
	/ '${' SPECIAL_NAMES '}'

// mode CommandMode
CMD_ARG_PART
	= { COMMAND_CHAR+ #String }

CMD_SEP
	= [ \t]+

REDIRECT_OP
	= { '<'
	/ '>' !'>'
	/ '1>' !'>'
	/ '1>>'
	/ '>>'
	/ '2>' !'>'
	/ '2>>'
	/ '>&'
	/ '&>' !'>'
	/ '&>>' #Name }

REDIRECT_OP_NO_ARG
	= { '2>&1' #Name }

PIPE       = '|' !'|'
BACKGROUND = '&' !'&'
OR_LIST    = '||'
AND_LIST   = '&&'


// ###############################
// ##     parser definition     ##
// ###############################

EOF
	= !.

ws
	= (WHITE_SPACE / COMMENT)?

_
	= (NEW_LINE / ws)*

// separator definition
"," = ws ','

// entry point
File
	= topLevel

Chunk
	= topLevelStatement?

// statement definition
topLevel
	= { _ (@topLevelStatement _)*  #TopLevel }EOF	//TODO

topLevelStatement
	= functionDeclaration
	/ statement
	/ COMMENT

statementEnd
	= EOF
	/ LINE_END
	/ NEW_LINE

functionDeclaration
	= { "function" _ @[2]VAR_NAME _ '(' _ @[3]argumentsDeclaration _ ')' _ @[1]returnType _ @[4]block #FuncDecl }

returnType
	= (typeAnnoPrefix typeNameWithVoid)?

typeAnnoPrefix = ws ':' ws
typeSep = ws ',' ws

argumentsDeclaration
	= { (@argumentDeclarationWithType (typeSep _ @argumentDeclarationWithType)*)?  #List}

argumentDeclarationWithType
	= { @[2]APPLIED_NAME typeAnnoPrefix @[1]typeName #Parameter }

typeName
	= { @{"int" #Name } #Type }
	/ { @{"float" #Name } #Type }
	/ { @{"boolean" #Name } #Type }
	/ { @{"Func" #Name } openType 
		@{ @typeNameWithVoid (typeSep openParamType @typeName (typeSep @typeName)* closeParamType)? #List } closeType #Type }
	/ !"void" { @IDENTIFIER openType @{ @typeName (typeSep @typeName)* #List } closeType #Type }
	/ !"void" { @IDENTIFIER #Type}

typeNameWithVoid
	= typeName
	/ { @{"void" #Name } #Type }

openType       = ws '<' ws
closeType      = ws '>' _
openParamType  =  _ '[' ws
closeParamType = ws ']' _

block
	= { '{' (_ @statement)+ _ '}' #Block }

statement
	= emptyStatement
	/ assertStatement ws statementEnd
	/ breakStatement ws statementEnd
	/ continueStatement ws statementEnd
	/ exportEnvStatement ws statementEnd
	/ forStatement
	/ ifStatement
	/ importEnvStatement ws statementEnd
	/ returnStatement ws statementEnd
	/ throwStatement ws statementEnd
	/ whileStatement
	/ doWhileStatement
	/ tryCatchStatement
	/ variableDeclaration ws statementEnd
	/ commandListExpression ws statementEnd
	/ assignStatement ws statementEnd
	/ expression ws statementEnd

forbitKeyWord
	= "assert" / "break" / "catch" / "class" / "continue" / "constructor" / "do"
	/ "else" / "extends" / "export-env" / "finally" / "for" / "function" / "if"
	/ "import-env" / "let" / "new" / "not" / "return" / "trace" / "try" / "throw"
	/ "var" / "while"

emptyStatement	//TODO:
	= { LINE_END #Empty }

assertStatement
	= { @{`System` #Type } @{"assert" #Name } _ '(' _ @condExpression _ ')' #Method }

breakStatement
	= { "break" #Break }

continueStatement
	= { "continue" #Continue }

exportEnvStatement
	= { @{`System` #Type } @{"export-env" #Name } _ @VAR_NAME ws "=" _ @expression #Method }

forStatement
	= { "for" _ '(' _ 
		(
			@APPLIED_NAME ws "in" _ @expression  #Foreach /
			@forInit _ LINE_END _ @forCond _ LINE_END _ @forIter #For
		)
		_ ')' _ @block }

forInit
	= (variableDeclaration
	/ assignStatement
	/ expression)?

forCond
	= expression?

forIter
	= (assignStatement 
	/ expression)?

condExpression
	= commandListExpression
	/ expression

ifStatement
	= { "if" _ '(' _ @condExpression _ ')' _ @block
		(_ "else" _ (@ifStatement / @block))? #If }

importEnvStatement
	= { @{ `System` #Type } @{"import-env" #Name } _ @VAR_NAME #Method }

returnStatement
	= "return" { (ws @expression)? #Return }

throwStatement
	= "throw" _ { @expression  #Throw}

whileStatement
	= { "while" _ '(' _ @condExpression _ ')' _ @block #While }

doWhileStatement
	= { "do" _ @block _ "while" _ '(' _ @condExpression _ ')'  #DoWhile }

tryCatchStatement
	= { "try" _ @block @{ (_ @catchStatement)*  #List} (_ @finallyBlock)? #Try }

finallyBlock
	= "finally" _ block

catchStatement
	= { "catch" _ '(' _ @[1]APPLIED_NAME (typeAnnoPrefix @[0]typeName)? _ ')' _ @[2]block #Catch }

variableDeclaration	//TODO: constant
	= { ("let" / "var") _ @VAR_NAME ws "=" _ @assignRightExpression #VarDecl }

assignRightExpression
	= commandExpression
	/ expression

assignStatement
	= { @applyOrGetExpression ws
		(("=" #Assign / '+=' #AssignAdd / '-=' #AssignSub / '*=' #AssignMul / '/=' #AssignDiv / '%=' #AssignMod ) 
			_ @assignRightExpression
		/ ('++' #SuffixInc / '--' #SuffixDec )) }

// expression definition
// command expression
commandListExpression
	= orListCommand

orListCommand
	= andListCommand {@ CMD_SEP? OR_LIST _ @andListCommand #Or }*

andListCommand
	= commandExpression {@ CMD_SEP? AND_LIST _ @commandExpression #And }*

commandExpression
	= { @{`Task` #Type} @singleCommandExpr (CMD_SEP? PIPE _ @singleCommandExpr)* CMD_SEP? (@BACKGROUND)? #Method }

singleCommandExpr
	= !forbitKeyWord { @{`Process` #Type } (@{ "trace" #Name } CMD_SEP)? @COMMAND @commandArgs @redirOptions #Method }

commandArgs
	= { (CMD_SEP @commandArg)* #List }

commandArg
	= { (@commandArgSeg)+ #List }

commandArgSeg
	= CMD_ARG_PART
	/ STRING_LITERAL
	/ substitutedCommand
	/ interpolation
	/ stringExpr

redirOptions
	= { (CMD_SEP @redirOption)* #List }

redirOption
		[example: > gtr]
		[example: >> 32]
	= { @REDIRECT_OP CMD_SEP? @commandArg #List }
	/ { @REDIRECT_OP_NO_ARG #List }

// normal expression
expression
	= condOrExpression

condOrExpression
	= condAndExpression {@ ws '||' _ @condAndExpression #Or }*

condAndExpression
	= orExpression {@ ws '&&' _ @orExpression #And }*

orExpression
	= xorExpression {@ ws "|" _ @xorExpression #LogicalOr }*

xorExpression
	= andExpression {@ ws '^' _ @andExpression #LogicalXor }*

andExpression
	= equalityExpression {@ ws "&" _ @equalityExpression #LogicalAnd }*

equalityExpression	//TODO: regex 
	= typeExpression {@ ws ('==' #Equals / '!=' #NotEquals / '=~' #Equals / '!~' #NotEquals ) _ @typeExpression}*

typeExpression	//TODO: cast
	= relationalExpression {@ ws ("as" #InstanceOf / "is" #InstanceOf ) _ @typeName}*

relationalExpression
	= addExpression {@ ws ("<" #LessThan / ">" #GreaterThan / '<=' #LessThanEquals / '>=' #GreaterThanEquals ) _ @addExpression}*

addExpression
	= mulExpression {@ ws ("+" #Add / "-" #Sub) _ @mulExpression}*

mulExpression
	= unaryExpression {@ ws ("/" #Div / "*" #Mul / "%" #Mod) _ @unaryExpression}*

unaryExpression
	= { ("+" #Plus / "-" #Minus / "not" #Compl) ws @unaryExpression }
	/ applyOrGetExpression

applyOrGetExpression
	= primaryExpression {@ ws (
		'.' _ @VAR_NAME #Field
		/ '[' _ @expression _ ']' #Index
		/ @arguments #Apply) }*

primaryExpression
	= literal
	/ { "new" ws @typeName _ @arguments #New }
	/ symbol
	/ substitutedCommand
	/ '(' _ expression _ ')'
	/ stringExpr

literal
	= INT_LITERAL
	/ FLOAT_LITERAL
	/ BOOLEAN_LITERAL
	/ STRING_LITERAL
	/ SPECIAL_NAME
	/ arrayLiteral
	/ mapLiteral
	/ pairLiteral

symbol
	= APPLIED_NAME

substitutedCommand
	= { BACKQUOTE_LITERAL #Null } // TODO: 
	/ '$(' _ commandListExpression _ ')'

arrayLiteral
	= '[' _ { @expression ("," _ @expression)* #Array } _ ']'

mapLiteral
	= '{' _ { @mapEntry ("," _ @mapEntry)* #Hash } _ '}'

mapEntry
	= { @expression ws ':' _ @expression #KeyValue }

pairLiteral
	= '(' _ { @expression "," _ @expression #KeyValue } _ ')'

arguments
	= '(' _ { argumentList? #List } _ ')'

argumentList
	= @expression ("," _ @expression)*

interpolation
	= INNER_NAME
	/ INNER_SPECIAL_NAME
	/ INNER_BOOLEAN
	/ '${' _ expression _ '}'

stringExpr
	= '"' { @{`System` #Type }  @{`StringExpr` #Name } (@stringElement)* #Method } '"'

stringElement
	= STRING_ELEMENT
	/ interpolation
	/ substitutedCommand

