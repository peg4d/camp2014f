// PEG4d Java8 Grammar
// ===============

export
	= Statement
	/ Expression
	/ Constant

File
	= _ { (@PackageDeclaration)? ( _ @ImportDeclaration)* ( _ @TypeDeclaration)* #Source } _ EOT


Chunk
	= TopLevel
	/ Statement
	/ Expression
	/ Type

_
	= (S / BLOCKCOMMENT / LINECOMMENT )*

S
	= [ \n\r\t\u000B\u000C]

BLOCKCOMMENT
	= '/*' (!'*/' .)* '*/'

LINECOMMENT
	= '//' (!'\n' .)*


EOL
	= ('\r'? '\n' / !.)

DIGIT
	= [0-9]

W
	= [a-zA-Z0-9_$]

HEX
	= [a-fA-F0-9]

HEX4
	= HEX HEX HEX HEX

Name
	= { NAME #Name }

NAME
	= !DIGIT !(KEYWORD !W) W+

KEYWORD
	= 'abstract' / 'assert' / 'boolean' / 'break' / 'byte' / 'case'
	/ 'catch' / 'char' / 'class' / 'const' / 'continue' / 'default'
	/ 'double' / 'do' / 'else' / 'enum' / 'extends' / 'false'
	/ 'final' / 'finally' / 'float' / 'for' / 'goto' / 'if' / 'implements'
	/ 'import' / 'instanceof' / 'interface' / 'int' / 'long' / 'native'
	/ 'new' / 'null' / 'package' / 'private' / 'protected' / 'public'
	/ 'return' / 'short' / 'static' / 'strictfp' / 'super' / 'switch'
	/ 'synchronized' / 'this' / 'throws' / 'throw' / 'transient'
	/ 'true' / 'try' / 'void' / 'volatile' / 'while'

"++"   = '++'
"--"   = '--'
"&"    = '&' ![&=]
"*"    = '*' !'='
"+"    = '+' ![+=]
"-"    = '-' !('-' / [=>])
"~"    = '~'
"!"    = '!' !'='

"{"    = '{'
"["    = '['
"]"    = ']'
","    = ','
"..."  = '...'
":"    = ':' ![>]
"/"    = '/' !'='
"%"    = '%' ![=>]
"<<"   = '<<' !'='
">>"   = '>>' ![=>]
">>>"  = '>>>' !'='
"<="   = '<='
">="   = '>='
"<"    = '<' ![=]
">"    = '>' ![=]
"=="   = '=='
"!="   = '!='
"^"    = '^' ![=]
"|"    = '|' ![|=]
"&&"   = '&&'
"||"   = '||'
"?"    = '?'
";"    = ';'
"}"    = '}'

"*="   = '*='
"/="   = '/='
"%="   = '%='
"+="   = '+='
"-="   = '-='
"<<="  = '<<='
">>="  = '>>='
">>>=" = '>>>='
"&="   = '&='
"^="   = '^='
"|="   = '|='
"="    = '=' !'='
"."    = '.'

"("    = '('
")"    = ')'

"@"    = '@'
"->"   = '->'

// reserved keyword
"abstract"     = 'abstract'     !W
"assert"       = 'assert'       !W
"boolean"      = 'boolean'      !W
"break"        = 'break'        !W
"byte"         = 'byte'         !W
"case"         = 'case'         !W
"catch"        = 'catch'        !W
"char"         = 'char'         !W
"class"        = 'class'        !W
"const"        = 'const'        !W
"continue"     = 'continue'     !W
"default"      = 'default'      !W
"do"           = 'do'           !W
"double"       = 'double'       !W
"else"         = 'else'         !W
"enum"         = 'enum'         !W
"extends"      = 'extends'      !W
"false"        = 'false'        !W
"final"        = 'final'        !W
"finally"      = 'finally'      !W
"float"        = 'float'        !W
"for"          = 'for'          !W
"goto"         = 'goto'         !W
"if"           = 'if'           !W
"implements"   = 'implements'   !W
"import"       = 'import'       !W
"instanceof"   = 'instanceof'   !W
"int"          = 'int'          !W
"interface"    = 'interface'    !W
"long"         = 'long'         !W
"native"       = 'native'       !W
"new"          = 'new'          !W
"null"         = 'null'         !W
"package"      = 'package'      !W
"private"      = 'private'      !W
"protected"    = 'protected'    !W
"public"       = 'public'       !W
"return"       = 'return'       !W
"short"        = 'short'        !W
"static"       = 'static'       !W
"strictfp"     = 'strictfp'     !W
"super"        = 'super'        !W
"switch"       = 'switch'       !W
"synchronized" = 'synchronized' !W
"this"         = 'this'         !W
"throw"        = 'throw'        !W
"throws"       = 'throws'       !W
"transient"    = 'transient'    !W
"true"         = 'true'         !W
"try"          = 'try'          !W
"void"         = 'void'         !W
"volatile"     = 'volatile'     !W
"while"        = 'while'        !W


EOT = !.

TopLevel
	= PackageDeclaration
	/ ImportDeclaration
	/ TypeDeclaration


// package definition
PackageDeclaration
	= { (@PackageModifier _ )* "package" _ @TypeName _ ";" #PackageDeclaration }

PackageModifier
	= Annotation

// import definition
ImportDeclaration
	= TypeImportOnDemandDeclaration
	/ SingleTypeImportDeclaration
	/ StaticImportOnDemandDeclaration
	/ SingleStaticImportDeclaration

SingleTypeImportDeclaration
	= "import" _ { @TypeName #SingleTypeImportDeclaration } _ ";"

TypeImportOnDemandDeclaration
	= "import" _ { @TypeName _ "." _ "*" #TypeImportOnDemandDeclaration } _ ";"

SingleStaticImportDeclaration
	= "import" _ "static" _ { @TypeName #SingleStaticImportDeclaration } _ ";"

StaticImportOnDemandDeclaration
	= "import" _ "static" _ { @TypeName #StaticImportOnDemandDeclaration } _ "." _ "*" _ ";"

// type definition
TypeDeclaration
	= ClassDeclaration
	/ InterfaceDeclaration
	/ { ";" #Empty }

// annotation definition
Annotation
	= NormalAnnotation
	/ SingleElementAnnotation
	/ MarkerAnnotation

NormalAnnotation
	= "@" _ { @TypeName _ "(" _ (@ElementValuePairList)? _ ")" #NormalAnnotation }

MarkerAnnotation
	= "@" _ { @TypeName #MarkerAnnotation }

SingleElementAnnotation
	= "@" _ { @TypeName _ "(" _ @ElementValue _ ")" #SingleElementAnnotation }

ElementValuePairList
	= { @ElementValuePair ( _ "," _ @ElementValuePair)* #ElementValuePairList }

ElementValuePair
	= { @Name _ "=" _ @ElementValue #ElementValuePair }

ElementValue
	= ElementValueArrayInitializer
	/ ConditionalExpression
	/ Annotation

ElementValueArrayInitializer
	= "{" _ { (@ElementValueList)? #ElementValueArrayInitializer } _ ","? _ "}"

ElementValueList
	= { @ElementValue ( _ "," _ @ElementValue)* #ElementValueList}


// Declaration
//==============

//local variable
VariableDeclaration
	= { (@VariableModifier _ )* @Type _ @InitDecl ( _ "," _ @InitDecl)* #Declaration }

VariableModifier
	= Annotation
	/ "final" _ { #KeyValue @{`abstraction` #Key } @{`final` #Value } }

InitDecl
	= { @VarName _ ("=" _ @Initializer)? #VarDecl }

InitDeclAssign
	= { @VarName _ "=" _ @Initializer #VarDecl }

VarName
	= Name {@ _ "[" _ (@ConstantExpression)? _ "]" #ArrayName }*

Initializer
	= Expression
	/ ArrayInitializer

ArrayInitializer
	= { "{" _ arrayInitializeExpressionList? _ ","? _ "}" #ArrayInitializer }

arrayInitializeExpressionList
	= (@Initializer ( _ "," _ @Initializer)*)

//class type, enum type
ClassDeclaration
	= { (@ClassModifier _ )* "class" _ @Name _ (@TypeParameters)? _ (@SuperClass _ )? (@SuperInterfaces _ )* @ClassBody #ClassDeclaration }
	/ { (@ClassModifier _ )* "enum" _ @Name _ (@SuperInterfaces _ )* @EnumBody #EnumDeclaration }

ClassModifier
	= Annotation
	/ "public"    _ { #KeyValue @{`visibility`  #Key } @{`public`    #Value } }
	/ "protected" _ { #KeyValue @{`visibility`  #Key } @{`protected` #Value } }
	/ "private"   _ { #KeyValue @{`visibility`  #Key } @{`private`   #Value } }
	/ "abstract"  _ { #KeyValue @{`abstraction` #Key } @{`abstract`  #Value } }
	/ "final"     _ { #KeyValue @{`abstraction` #Key } @{`final`     #Value } }
	/ "static"    _ { #KeyValue @{`static`      #Key } @{`true`      #Value } }
	/ "strictfp"  _ { #KeyValue @{`strictfp`    #Key } @{`true`      #Value } }

SuperClass
	= "extends" _ { @ClassOrInterfaceType #SuperClass }

SuperInterfaces
	= "implements" _ { @ClassOrInterfaceTypes #SuperInterfaces }

EnumBody
	= "{" _ { (@EnumeratorList)? _ ","? _ ";" ( _ @ClassBodyDeclaration)+ #EnumBody } _ "}"
	/ "{" _ { (@EnumeratorList)? _ ","? _ ";"? #EnumBody } _ "}"

EnumeratorList
	= { @Enumerator ( _ "," _ @Enumerator)* #List }

Enumerator
	= { (@Annotation _ )* @Name _ (@{ "(" _ addArgumentExpressionList? _ ")" #List })? ( _ @ClassBody)? #Enumerator }

ClassBody
	= "{" _ { (@ClassBodyDeclaration _ )* #ClassBody } "}"

ClassBodyDeclaration
	= ClassMemberDeclaration
	/ { @Block #InstanceInisializer }
	/ "static" _ { @Block #StaticInitializer }
	/ ConstructorDeclaration

ClassMemberDeclaration
	= FieldDeclaration
	/ MethodDeclaration
	/ ClassDeclaration
	/ InterfaceDeclaration
	/ { ";" #Empty }

//interface, annotation type
InterfaceDeclaration
	= { (@InterfaceModifier _ )* "interface" _ @Name _ (@TypeParameters)? _ (@ExtendsInterfaces _ )* @InterfaceBody #InterfaceDeclaration }
	/ { (@InterfaceModifier _ )* "@" _ "interface" _ @Name _ @AnnotationTypeBody #AnnotationTypeDeclaration }

InterfaceModifier
	= Annotation
	/ "public"    _ { #KeyValue @{`visibility`  #Key } @{`public`    #Value } }
	/ "protected" _ { #KeyValue @{`visibility`  #Key } @{`protected` #Value } }
	/ "private"   _ { #KeyValue @{`visibility`  #Key } @{`private`   #Value } }
	/ "abstract"  _ { #KeyValue @{`abstraction` #Key } @{`abstract`  #Value } }
	/ "static"    _ { #KeyValue @{`static`      #Key } @{`true`      #Value } }
	/ "strictfp"  _ { #KeyValue @{`strictfp`    #Key } @{`true`      #Value } }

ExtendsInterfaces
	= { "extends" _ @ClassOrInterfaceTypes #ExtendsInterfaces }

InterfaceBody
	= "{" _ { (@InterfaceMemberDeclaration _ )* #InterfaceBody } "}"

InterfaceMemberDeclaration
	= ConstantDeclaration
	/ InterfaceMethodDeclaration
	/ ClassDeclaration
	/ InterfaceDeclaration
	/ { ";" #Empty }

AnnotationTypeBody
	= "{" _ { (@AnnotationTypeMemberDeclaration _ )* #AnnotationTypeBody } "}"

AnnotationTypeMemberDeclaration
	= AnnotationTypeElementDeclaration
	/ ConstantDeclaration
	/ ClassDeclaration
	/ InterfaceDeclaration
	/ { ";" #Empty }

AnnotationTypeElementDeclaration
	= { (@AnnotationTypeElementModifier _ )* @Type _ @Name _ "(" _ ")" _ (@AnnotationTypeElementDefaultValue)? _ ";" #AnnotationTypeElement }

AnnotationTypeElementModifier
	= Annotation
	/ "public"   _ { #KeyValue @{`visibility`  #Key } @{`public`   #Value } }
	/ "abstract" _ { #KeyValue @{`abstraction` #Key } @{`abstract` #Value } }

AnnotationTypeElementDefaultValue
	= "default" _ ElementValue


//field, constant
FieldDeclaration
	= { (@FieldModifier _ )* @Type _ @InitDecl ( _ "," _ @InitDecl)* #Field } _ ";"

FieldModifier
	= Annotation
	/ "public"    _ { #KeyValue @{`visibility` #Key } @{`public`    #Value } }
	/ "protected" _ { #KeyValue @{`visibility` #Key } @{`protected` #Value } }
	/ "private"   _ { #KeyValue @{`visibility` #Key } @{`private`   #Value } }
	/ "final"     _ { #KeyValue @{`final`      #Key } @{`true`      #Value } }
	/ "static"    _ { #KeyValue @{`static`     #Key } @{`true`      #Value } }
	/ "transient" _ { #KeyValue @{`transient`  #Key } @{`true`      #Value } }
	/ "volatile"  _ { #KeyValue @{`volatile`   #Key } @{`true`      #Value } }

ConstantDeclaration
	= { (@ConstantModifier _ )* @Type _ @InitDecl ( _ "," _ @InitDecl)* #Constant } _ ";"

ConstantModifier
	= Annotation
	/ "public" _ { #KeyValue @{`visibility` #Key } @{`public` #Value } }
	/ "final"  _ { #KeyValue @{`final`      #Key } @{`true`   #Value } }
	/ "static" _ { #KeyValue @{`static`     #Key } @{`true`   #Value } }

//method
MethodDeclaration
	= { (@MethodModifier _ )* (@TypeParameters _ (@Annotation _ )*)? @TypeOrVoid _ @Name _ "(" _ @MethodParamList _ ")" _ (@Throws)? _ (@Block / ";") #Method }

MethodModifier
	= Annotation
	/ "public"       _ { #KeyValue @{`visibility`   #Key } @{`public`    #Value } }
	/ "protected"    _ { #KeyValue @{`visibility`   #Key } @{`protected` #Value } }
	/ "private"      _ { #KeyValue @{`visibility`   #Key } @{`private`   #Value } }
	/ "abstract"     _ { #KeyValue @{`abstraction`  #Key } @{`abstract`  #Value } }
	/ "final"        _ { #KeyValue @{`abstraction`  #Key } @{`final`     #Value } }
	/ "static"       _ { #KeyValue @{`static`       #Key } @{`true`      #Value } }
	/ "synchronized" _ { #KeyValue @{`synchronized` #Key } @{`true`      #Value } }
	/ "native"       _ { #KeyValue @{`native`       #Key } @{`true`      #Value } }
	/ "strictfp"     _ { #KeyValue @{`strictfp`     #Key } @{`true`      #Value } }

InterfaceMethodDeclaration
	= { (@InterfaceMethodModifier _ )* (@TypeParameters _ (@Annotation _ )*)? @TypeOrVoid _ @Name _ "(" _ @MethodParamList _ ")" _ (@Throws)? _ (@Block / ";") #Method }

InterfaceMethodModifier
	= Annotation
	/ "public"   _ { #KeyValue @{`visibility`  #Key } @{`public`   #Value } }
	/ "abstract" _ { #KeyValue @{`abstraction` #Key } @{`abstract` #Value } }
	/ "default"  _ { #KeyValue @{`abstraction` #Key } @{`default`  #Value } }
	/ "static"   _ { #KeyValue @{`static`      #Key } @{`true`     #Value } }
	/ "strictfp" _ { #KeyValue @{`strictfp`    #Key } @{`true`     #Value } }

MethodParamList
	= { (@MethodParam _ "," _ )* @VarArgs #List }
	/ { ( @MethodParam ( _ "," _ @MethodParam)* )? #List }

MethodParam
	= { (@VariableModifier _ )* @Type _ @VarName #Param }

VarArgs
	= { @Type _ "..." _ @VarName #VarArgs }

Throws
	= "throws" _ { @ClassOrInterfaceTypes #Throws }

//constructor
ConstructorDeclaration
	= { (@ConstructorModifier _ )* @ReferenceType _ "(" _ @MethodParamList _ ")" _ (@Throws)? _ @ConstructorBody #Constructor }

ConstructorModifier
	= Annotation
	/ "public"    _ { #KeyValue @{`visibility` #Key } @{`public`    #Value } }
	/ "protected" _ { #KeyValue @{`visibility` #Key } @{`protected` #Value } }
	/ "private"   _ { #KeyValue @{`visibility` #Key } @{`private`   #Value } }

ConstructorBody
	= { "{" _ (@ExplicitConstructorInvocation _ )? ((@Statement / @LocalDeclaration) _ )* "}" #Block }

ExplicitConstructorInvocation
	= { (@TypeArguments _ )? @{ "this" _  "(" _ addArgumentExpressionList? _ ")" #List } #ExplicitConstructorInvocation  } _ ";"
	/ { (@TypeArguments _ )? @{ "super" _ "(" _ addArgumentExpressionList? _ ")" #List } #ExplicitConstructorInvocation  } _ ";"
//	/ { @PrimaryExpression '.' (@TypeArguments _ )? "super" _ @{ "(" _ addArgumentExpressionList? _ ")" #List } #ExplicitConstructorInvocation  } _ ";"
//	/ { @TypeName _ '.' (@TypeArguments _ )? "super" _ @{ "(" _ addArgumentExpressionList? _ ")" #List } #ExplicitConstructorInvocation  } _ ";"


//Type
//====

Type
	= ReferenceType / PrimaryType

TypeOrVoid
	= Type / Void

Type_noArray
	= ClassOrInterfaceType / PrimaryType

TypeName
	= Name {@ _ "." _ @Name #TypeName }*

ReferenceType
	= ArrayType
	/ ClassOrInterfaceType

ArrayType
	= (PrimaryType / ClassOrInterfaceType) {@ _ "[" _ "]" #TArray }+

ClassOrInterfaceType
	= { @TypeName _ @TypeArguments #TGenerics }
	/ TypeName

ClassOrInterfaceTypes
	= { @ClassOrInterfaceType ( _ "," _ @ClassOrInterfaceType)* #TypeList }

TypeParameters
	= { "<" _ @TypeParameter _ ("," _ @TypeParameter _ )* ">" #TypeParameters }

TypeParameter
	= ReferenceType {@ _ "extends" _ @ReferenceType ( _ "&" _ @ReferenceType)* #SuperTypes }?

TypeArguments
	= { "<" _ @TypeArgument _ ("," _ @TypeArgument _ )* ">" #TypeArguments }
	/ { "<" _ ">" #Diamond }

TypeArgument
	= ReferenceType
	/ { "?" #TWildCard } {@ _ ("extends" #UpperBound / "super" #LowerBound) _ @ReferenceType }?

PrimaryType
	= { "byte"    #TInt }
	/ { "char"    #TInt }
	/ { "short"   #TInt }
	/ { "int"     #TInt }
	/ { "long"    #TInt }
	/ { "float"   #TFloat }
	/ { "double"  #TFloat }
	/ { "boolean" #TBoolean }

Void
	= { "void" #TVoid }


// Block, Statement
//===================

Block
	= { "{" _ ((@Statement / @LocalDeclaration) _ )* "}" #Block }

LocalDeclaration
	= VariableDeclaration ";"
	/ ClassDeclaration

Statement
	= Block
	/ { "assert" _ @Expression _ (":" _ @Expression _ )? ";" #Assert }
	/ { "if" _   "(" _ @Expression _ ")" _ @Statement ( _ "else" _ @Statement)? #If }
	/ { "switch" _ "(" _ @Expression _ ")" _ @Statement #Switch }
	/ { "while" _  "(" _ @Expression _ ")" _ @Statement #While }
	/ { "do" _ @Statement _ "while" _ "(" _ @Expression _ ")" _ ";" #DoWhile }
	/ { "for" _ "(" _ (@Expressions)? _    ";" _ (@Expression)? _ ";" _ (@Expressions)? _ ")" _ @Statement #For }
	/ { "for" _ "(" _ @VariableDeclaration ";" _ (@Expression)? _ ";" _ (@Expressions)? _ ")" _ @Statement #For }
	/ { "for" _ "(" _ (@VariableModifier _ )* @Type _ @Name _ ":" _ @Expression _ ")" _ @Statement #ForEach }
	/ { "goto" _ @Name _ ";" #Goto }
	/ { "continue" _ ";" #Continue }
	/ { "break" _ ";" #Break }
	/ { "return" _ (@Expression)? _ ";" #Return }
	/ { "try" _ @ResourceStatement _ @Block ( _ @CatchBlock)* ( _ @{ "finally" _ @Block #Finally })? #Try }
	/ { "try" _ @Block _ (@CatchBlock _ )* @{ "finally" _ @Block #Finally } #Try }
	/ { "try" _ @Block ( _ @CatchBlock)+ #Try }
	/ { "throw" _ @Expression _ ";" #Throw }
	/ { "case" _ @ConstantExpression _ ":" _ (!"case" !"default" @Statement)* #SwitchCase }
	/ { "default" _ ":" _ (!"case" @Statement)* #SwitchDefault }
	/ { @Name _ ":" #Label }
	/ { @Expression _ ";" #ExpressionStatement }
	/ { ";" #Empty }

//trycatch
ResourceStatement
	= "(" _ { @Resource ( _ ";" _ @Resource)* #ResourceList } _ ";"? _ ")"

Resource
	= { (@VariableModifier _ )* @Type _ @Name _ "=" _ @Expression #Declaration }

CatchBlock
	= { "catch" _ "(" _ @CatchParameter _ ")" _ @Block #Catch }

CatchParameter
	= { (@VariableModifier _ )* @ClassOrInterfaceType _ @Name ( _ "|" _ @Name )* #Declaration }


//Expression
//==========

Expression
	= LambdaExpression
	/ AssignmentExpression

Expressions
	= { @Expression ( _ "," _ @Expression)* #Expressions }

AssignmentExpression
	= { @UnaryExpression _ addAssignmentOperator _ @Expression }
	/ ConditionalExpression

addAssignmentOperator
	= "="    #Assign
	/ "*="   #AssignMul
	/ "/="   #AssignDiv
	/ "%="   #AssignMod
	/ "+="   #AssignAdd
	/ "-="   #AssignSub
	/ "<<="  #AssignLeftShift
	/ ">>="  #AssignArithmeticRightShift
	/ ">>>=" #AssignLogicalRightShift
	/ "&="   #AssignBitwiseAnd
	/ "^="   #AssignBitwiseXOr
	/ "|="   #AssignBitwiseOr

ConstantExpression
	= ConditionalExpression

ConditionalExpression
	= LogicalORExpression {@ _ "?" _  @Expression _ ":" _ @LogicalORExpression #Trinary }*

LogicalORExpression
	= LogicalANDExpression {@ _ "||" _ @LogicalANDExpression #Or }*

LogicalANDExpression
	= InclusiveORExpression {@ _ "&&" _ @InclusiveORExpression #And }*

InclusiveORExpression
	= ExclusiveORExpression {@ _ "|" _ @ExclusiveORExpression #BitwiseOr }*

ExclusiveORExpression
	= ANDExpression {@ _ "^" _ @ANDExpression #BitwiseXor }*

ANDExpression
	= EqualityExpression {@ _ "&" _ @EqualityExpression #BitwiseAnd }*

EqualityExpression
	= RelationalExpression {@ _ ( "==" #Equals / "!=" #NotEquals ) _ @RelationalExpression }*

relationalOperator
	= "<=" #LessThanEquals
	/ ">=" #GreaterThanEquals
	/ "<"  #LessThan
	/ ">"  #GreaterThan

RelationalExpression
	= ShiftExpression {@ _ ( relationalOperator _ @ShiftExpression / "instanceof" _ @ReferenceType #InstanceOf ) }*

ShiftExpression
	= AdditiveExpression {@ _ ( "<<" #LeftShift / ">>" #ArithmeticRightShift / ">>>" #LogicalRightShift ) _ @AdditiveExpression }*

AdditiveExpression
	= MultiplicativeExpression {@ _ ( "+" #Add / "-" #Sub ) _ @MultiplicativeExpression }*

MultiplicativeExpression
	= CastNewExpression {@ _ ( "*" #Mul / "/" #Div / "%" #Mod ) _ @CastNewExpression }*

CastNewExpression
	= { "(" _ @Type _ ")" _ @CastNewExpression #Cast }
	/ UnaryExpression

UnaryExpression
	= PostfixExpression
	/ { "++" _ @UnaryExpression #PrefixInc }
	/ { "--" _ @UnaryExpression #PrefixDec }
	/ { "+"  _ @CastNewExpression #Plus }
	/ { "-"  _ @CastNewExpression #Minus }
	/ { "~"  _ @CastNewExpression #Compl }
	/ { "!"  _ @CastNewExpression #Not }

PostfixExpression
	= (PrimaryExpression / InstanceCreationExpression / ArrayCreationExpression )
		{@ _ (addMethodCall / addIndex / addField / addMethodReference / addInc / addDec ) }*

InstanceCreationExpression
	= { "new" _ (@TypeArguments)? _ (@Annotation _ )* @ClassOrInterfaceType _ @{ "(" _ addArgumentExpressionList? _ ")" #List } ( _ @ClassBody)? #InstanceCreation }

ArrayCreationExpression
	= { "new" _ (@Annotation _ )* @(Type_noArray {@ _ (@Annotation _ )* "[" _ @Expression _ "]" #ArraySize }+ ) #ArrayCreation }
	/ { "new" _ (@Annotation _ )* @(Type_noArray {@ _ (@Annotation _ )* "[" _ "]" #ArraySize }+ ) _ @ArrayInitializer #ArrayCreation }

addMethodCall
	= "." _ (@TypeArguments)? _ @Name _ @{ "(" _ addArgumentExpressionList? _ ")" #List } #Method
	/ @{ "(" _ addArgumentExpressionList? _ ")" #List } #Method

addArgumentExpressionList
	= (@Expression (_ "," _ @Expression)*)

addIndex
	= "[" _ @Expression _ "]" #Index

addField
	= "." _ @Name _ !'(' #Field

addMethodReference
	= "::" _ @(Name / { "new" #New } ) #MethodReference

addInc
	= "++" #Inc

addDec
	= "--" #Dec

PrimaryExpression
	= Constant
	/ "(" _ Expression _ ")"
	/ { "this" #This }
	/ { "super" #Super }
	/ { @TypeOrVoid _ "." _ "class" #Class }
	/ Name

LambdaExpression
	= { @LambdaParameters _ "->" _ @LambdaBody #LambdaExpression }

LambdaParameters
	= { (@Name
		/ @{ "(" _ addArgumentExpressionList? _ ")" #AddArgumentExpressionList }
		/ "(" _ @InferredFormalParameterList _ ")"
		) #LambdaParameters }

InferredFormalParameterList
	= { @Name ( _ "," _ @Name)* #InferredFormalParameterList }

LambdaBody
	= { (@Expression / @Block) #LambdaBody }


//Literal
//=======

Constant
	= JavaFloat
	/ JavaInteger
	/ JavaBoolean
	/ JavaString
	/ JavaChar
	/ JavaNull

JavaFloat
	= { FLOAT #Float } FLOAT_SUFFIX?

FLOAT
	= FRACTION EXPONENT?
	/ DIGIT+ EXPONENT

FRACTION
	= !'_' ('_'* DIGIT)* '.' DIGIT ('_'* DIGIT)*
	/ DIGIT ('_'* DIGIT)* '.'

EXPONENT
	= [eE] [+\-]? DIGIT ('_'* DIGIT)*

FLOAT_SUFFIX
	= [fFdD]

JavaInteger
	= { ( DECIMAL / HEXADECIMAL ) #Integer } INT_SUFFIX?
//	= { ( BINARY / DECIMAL / HEXADECIMAL / OCTAL ) #Integer } INT_SUFFIX?

BINARY
	= BIN_PREFIX [01] ('_'* [01])*

BIN_PREFIX
	= '0' [bB]

DECIMAL
	= '0' ![0-9xXbB]
	/ [1-9] ('_'* DIGIT)*

HEXADECIMAL
	= HEX_PREFIX HEX ('_'* HEX)*

HEX_PREFIX
	= '0' [xX]

OCTAL
	= '0' ('_'* [0-7])*

INT_SUFFIX
	= [lL]

JavaBoolean
	= { "true"  #True }
	/ { "false" #False }

JavaString
	= '"' { STRING_CONTENT* #String } '"'

JavaChar
	= '\'' { CHAR_CONTENT* #Character } '\''

STRING_CONTENT
	= ESCAPE
	/ ![\"\n\\] .

CHAR_CONTENT
	= ESCAPE
	/ !['\n\\] .

ESCAPE
	= SIMPLE_ESCAPE
	/ OCTAL_ESCAPE
	/ HEX_ESCAPE

SIMPLE_ESCAPE
	= '\\' ['\"\\bfnrt]

OCTAL_ESCAPE
	= '\\' [0-3] [0-7] [0-7]
	/ '\\' [0-7] [0-7]
	/ '\\' [0-7]

HEX_ESCAPE
	= '\\' 'u'+ HEX4

JavaNull
	= { "null" #Null }
