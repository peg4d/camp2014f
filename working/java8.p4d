// PEG4d Java8 Grammar
// ===============

export
	= Statement
	/ Expression
	/ CInteger
	/ CFloat
	/ CString
	/ CChar

File
	= _ { ( @TopLevel / _ )* #Source } EOT

Chunk
	= TopLevel
	/ Statement
	/ Expression
	/ Type
_
	= (S / BLOCKCOMMENT / LINECOMMENT )*

S
	= [ \n\r\t\u000B\u000C]

BLOCKCOMMENT
	= '/*' (!'*/' .)* '*/'

LINECOMMENT
	= '//' (!'\n' .)*


EOL
	= ('\r'? '\n' / !.)

DIGIT
	= [0-9]

W
	= [a-zA-Z0-9_$]
	/ UCHAR

UCHAR
	= '\\u' HEX4
	/ '\\U' HEX4 HEX4

HEX4
	= HEX HEX HEX HEX

Name
	= { NAME #Name } _ 

NAME
	= !DIGIT !(KEYWORD !W) W+

KEYWORD
	= 'abstract' / 'assert' / 'boolean' / 'break' / 'byte' / 'case'
	/ 'catch' / 'char' / 'class' / 'const' / 'continue' / 'default'
	/ 'do' / 'double' / 'else' / 'enum' / 'extends' / 'false'
	/ 'final' / 'finally' / 'float' / 'for' / 'goto' / 'if' / 'implements'
	/ 'import' / 'instanceof' / 'int' / 'interface' / 'long' / 'native'
	/ 'new' / 'null' / 'package' / 'private' / 'protected' / 'public'
	/ 'return' / 'short' / 'static' / 'strictfp' / 'super' / 'switch'
	/ 'synchronized' / 'this' / 'throw' / 'throws' / 'transient'
	/ 'true' / 'try' / 'void' / 'volatile' / 'while'

"++"     = '++' _
"--"     = '--' _
"&"      = '&' !'&' _
"*"      = '*' !'=' _
"+"      = '+' ![+=] _
"-"      = '-' !('-' / [=>]) _
"~"      = '~' _
"!"      = '!' !'=' _

"{"      = '{' _
"["      = '[' _
"]"      = ']' _
","      = ',' _
"..."    = '...' _
":"      = ':' ![>] _
"/"      = '/' !'=' _
"%"      = '%' ![=>] _
"<<"     = '<<' !'=' _
">>"     = '>>' !'=' _
"<="     = '<=' _
">="     = '>=' _
"<"      = '<' ![=] _
">"      = '>' ![=] _
"=="     = '==' _
"!="     = '!=' _
"^"      = '^' ![=] _
"|"      = '|' ![=] _
"&&"     = '&&' _
"||"     = '||' _
"?"      = '?' _
";"      = (';' _ / EOL)  /* this is for debug */
"}"      = '}' _

"*="     = '*=' _
"/="     = '/=' _
"%="     = '%=' _
"+="     = '+=' _
"-="     = '-=' _
"<<="    = '<<=' _
">>="    = '>>=' _
"&="     = '&=' _
"^="     = '^=' _
"|="     = '|=' _
"="      = '=' !'=' _
"."      = '.' _

"("      = '(' _
")"      = ')' _

"@"      = '@' _
"->"     = '->' _

// reserved keyword
"abstract"          = 'abstract'          !W _
"assert"            = 'assert'            !W _
"boolean"           = 'boolean'           !W _
"break"             = 'break'             !W _
"byte"              = 'byte'              !W _
"case"              = 'case'              !W _
"catch"             = 'catch'             !W _
"char"              = 'char'              !W _
"class"             = 'class'             !W _
"const"             = 'const'             !W _
"continue"          = 'continue'          !W _
"default"           = 'default'           !W _
"do"                = 'do'                !W _
"double"            = 'double'            !W _
"else"              = 'else'              !W _
"enum"              = 'enum'              !W _
"extends"           = 'extends'           !W _
"false"             = 'false'             !W _
"final"             = 'final'             !W _
"finally"           = 'finally'           !W _
"float"             = 'float'             !W _
"for"               = 'for'               !W _
"goto"              = 'goto'              !W _
"if"                = 'if'                !W _
"implements"        = 'implements'        !W _
"import"            = 'import'            !W _
"instanceof"        = 'instanceof'        !W _
"int"               = 'int'               !W _
"interface"         = 'interface'         !W _
"long"              = 'long'              !W _
"native"            = 'native'            !W _
"new"               = 'new'               !W _
"null"              = 'null'              !W _
"package"           = 'package'           !W _
"private"           = 'private'           !W _
"protected"         = 'protected'         !W _
"public"            = 'public'            !W _
"return"            = 'return'            !W _
"short"             = 'short'             !W _
"static"            = 'static'            !W _
"strictfp"          = 'strictfp'          !W _
"super"             = 'super'             !W _
"switch"            = 'switch'            !W _
"synchronized"      = 'synchronized'      !W _
"this"              = 'this'              !W _
"throw"             = 'throw'             !W _
"throws"            = 'throws'            !W _
"transient"         = 'transient'         !W _
"true"              = 'true'              !W _
"try"               = 'try'               !W _
"void"              = 'void'              !W _
"volatile"          = 'volatile'          !W _
"while"             = 'while'             !W _


EOT = !.

TopLevel
	= PackageDeclaration
	/ ImportDeclaration
	/ ClassDeclaration


// package definition
PackageDeclaration
	= { (@PackageModifier)* _ "package" _ @Name _ ( "." @Name _ )* ";" #PackageDeclaration }

PackageModifier
	= Annotation

// import definition
ImportDeclaration
	= TypeImportOnDemandDeclaration
	/ SingleImportDeclaration
	/ StaticImportOnDemandDeclaration
	/ SingleStaticImportDeclaration

SingleTypeImportDeclaration
	= "import" { @TypeName #SingleTypeImportDeclaration } _ ";"

TypeImportOnDemandDeclaration
	= "import" { @TypeName  _ "." "*" #TypeImportOnDemandDeclaration } ";"

SingleStaticImportDeclaration
	= "import" "static" { @TypeName _ '.' _ @Name #SingleStaticImportDeclaration } _ ";"

StaticImportOnDemandDeclaration
	= "import" "static" { @TypeName #StaticImportOnDemandDeclaration } _ "." "*" ";"

TypeName
	= { @Name ( _ "." @Name #TypeName) }

// annotation definition
Annotation
	= NormalAnnotation
	/ SingleElementAnnotation
	/ MarkerAnnotation

NormalAnnotation
	= "@" { @TypeName _ "(" (@ElementValuePairList)? _ ")" #NormalAnnotation }

MarkerAnnotation
	= "@" { @TypeName #MarkerAnnotation }

SingleElementAnnotation
	= "@" { @TypeName _ "(" @ElementValue _ ")" #SingleElementAnnotation }

ElementValuePairList
	= { @ElementValuePair ( _ "," @ElementValuePair)* #ElementValuePairList }

ElementValuePair
	= { @Name _ "=" @ElementValue #ElementValuePair }

ElementValue
	= ElementValueArrayInitializer
//	/ conditionalExpression
	/ Annotation

ElementValueArrayInitializer
	= "{" { (@ElementValueList)? #ElementValueArrayInitializer } _ ","? "}"

ElementValueList
	= { @ElementValue ( _ "," @ElementValue)* #ElementValueList}


	
// Declaration
//==============

VariableDeclaration
	= { (@Annotation)* @Type @InitDecl ("," @InitDecl)*  ";" #Declaration }

InitDecl
	= { @VarName ("=" @Initializer)? #VarDecl } _

InitDeclAssign
	= { @VarName "=" @Initializer #VarDecl } _

VarName
	= { "*" @VarName #PointerName } _
	/ Name {@ "[" (@ConstantExpression)? "]" #ArrayName}*

Initializer
	= AssignmentExpression
	/ "{" { (addInitializerList)* ","? #Initializer } "}"

addInitializerList
	= (@Designation / @Initializer)? ("," (@Designation / @Initializer))*

Designation
	= { (@Designator)+ "=" @Initializer  #Designation }
	
Designator
	= "[" ConstantExpression "]"
	/ "." Name _


//Type
//====

Type
	= ({ @PrimaryType @TGenerics #TGenerics } / PrimaryType) {@ "[" _? "]" #TArray }*

TGenerics
	= { "<" @Type ("," @Type)* ">" #Generics } _

PrimaryType
	= { "byte"         #TInt } _
	/ { "char"         #TInt } _
	/ { "short"        #TInt } _
	/ { "int"          #TInt } _
	/ { "long"         #TInt } _
	/ { "float"        #TFloat } _
	/ { "double"       #TFloat } _
	/ { "boolean"      #TBoolean } _
	/ { NAME   #Name } _

//class
ClassDeclaration
	= { (@ClassModifier)* "class" @Name (@TGenerics)? (@SuperClass)? (@SuperInterfaces)* @ClassBody #TClass } _
	/ { (@ClassModifier)* "enum" @Name (@SuperInterfaces)* @EnumBody #TEnum } _

ClassModifier
	= Annotation
	/ "public"    _ { #KeyValue @{`visibility` #Key } @{`public` #Value } } _
	/ "protected" _ { #KeyValue @{`visibility` #Key } @{`protected` #Value } } _
	/ "private"   _ { #KeyValue @{`visibility` #Key } @{`private` #Value } } _
	/ "abstract"  _ { #KeyValue @{`abstraction` #Key } @{`abstract` #Value } } _
	/ "final"     _ { #KeyValue @{`abstraction` #Key } @{`final` #Value } } _
	/ "static"    _ { #KeyValue @{`static` #Key } @{`true` #Value } } _
	/ "strictfp"  _ { #KeyValue @{`strictfp` #Key } @{`true` #Value } } _

SuperClass
	= { "extends" _ @Type #SuperClass } _

SuperInterfaces
	= { "implements" _ @Type ("," @Type)* #SuperInterfaces } _

EnumBody
	= "{" { (@EnumeratorList)? ","? ";" (@ClassBodyDeclaration)? #EnumBody } _ "}"

EnumeratorList
	= { @Enumerator ("," @Enumerator)* #List }

Enumerator
	= { (@Annotation)* @Name (@{ "(" addArgumentExpressionList ")" #List })? (@ClassBody)? #Enumerator }

ClassBody
	= "{" { (@ClassBodyDeclaration)+ #ClassBody } "}"

ClassBodyDeclaration
	= ClassMemberDeclaration
	/ { @Block #InstanceInisializer } _
	/ 'static' _ { @Block #StaticInitializer } _
//	/ ConstructorDeclaration

ClassMemberDeclaration
	= FieldDeclaration
	/ MethodDeclaration
	/ ClassDeclaration
//	/ InterfaceDeclaration

FieldDeclaration
	= { (@FieldModifier)* @Type @InitDecl ("," @InitDecl)*  ";" #Field } _

FieldModifier
	= Annotation
	/ "public"    { #KeyValue @{`visibility` #Key } @{`public` #Value } } _
	/ "protected" { #KeyValue @{`visibility` #Key } @{`protected` #Value } } _
	/ "private"   { #KeyValue @{`visibility` #Key } @{`private` #Value } } _
	/ "final"     { #KeyValue @{`final` #Key } @{`true` #Value } } _
	/ "static"    { #KeyValue @{`static` #Key } @{`true` #Value } } _
	/ "transient" { #KeyValue @{`transient` #Key } @{`true` #Value } } _
	/ "volatile"  { #KeyValue @{`volatile` #Key } @{`true` #Value } } _

MethodDeclaration
	= { (@MethodModifier)* @Type @Name "(" @MethodParamList ")" (@Block / ";") #Method } _

MethodModifier
	= Annotation
	/ "public"        { #KeyValue @{`visibility` #Key } @{`public` #Value } } _
	/ "protected"     { #KeyValue @{`visibility` #Key } @{`protected` #Value } } _
	/ "private"       { #KeyValue @{`visibility` #Key } @{`private` #Value } } _
	/ "abstract"      { #KeyValue @{`abstraction` #Key } @{`abstract` #Value } } _
	/ "final"         { #KeyValue @{`abstraction` #Key } @{`final` #Value } } _
	/ "static"        { #KeyValue @{`static` #Key } @{`true` #Value } } _
	/ "synchronized"  { #KeyValue @{`synchronized` #Key } @{`true` #Value } } _
	/ "native"        { #KeyValue @{`native` #Key } @{`true` #Value } } _
	/ "strictfp"      { #KeyValue @{`strictfp` #Key } @{`true` #Value } } _

MethodParamList
	= { ( @MethodParam ("," @MethodParam)* )? ("," "...")? #List } 

MethodParam
	= { @Type _ @VarName #Param} _

ConstructorDeclaration
	= { (@ConstructorModifier)* @Type "(" @MethodParamList ")" @Block #Constructor } _

ConstructorModifier
	= Annotation
	/ "public"        { #KeyValue @{`visibility` #Key } @{`public` #Value } } _
	/ "protected"     { #KeyValue @{`visibility` #Key } @{`protected` #Value } } _
	/ "private"       { #KeyValue @{`visibility` #Key } @{`private` #Value } } _

//ExplicitConstructorInvocation
//	= @{ "this"    @{ "(" addArgumentExpressionList ")" #List } #ConstructorInvocation  } ";"
//	/ @{ "super"   @{ "(" addArgumentExpressionList ")" #List } #ConstructorInvocation  } ";"
//	/ @{ "super"   @{ "(" addArgumentExpressionList ")" #List } #ConstructorInvocation  } ";"
//	/ @{ "super"   @{ "(" addArgumentExpressionList ")" #List } #ConstructorInvocation  } ";"


// Block, Statement
//===================

Block
	= { "{" (@Statement / @Declaration)* "}" #Block }

Statement
	= Block
	/ { "if"   "(" @Expression ")" @Statement ("else" @Statement)? #If }
	/ { "switch" "(" @Expression ")" @Statement #Switch }
	/ { "while"  "(" @Expression ")" @Statement #While }
	/ { "do" @Statement "while" "(" @Expression ")" ";" #DoWhile }
	/ { "for" "(" (@Expression)? ";" (@Expression)? ";" (@Expression)? ")" @Statement #For }
	/ { "for" "(" @Declaration (@Expression)? ";" (@Expression)? ";" @Statement #For }
	/ { "goto" @Name ";" #Goto }
	/ { "continue" ";" #Continue }
	/ { "break" ";" #Break }
	/ { "return" (@Expression)?  ";" #Return }
	/ { "case" @ConstantExpression ":" (!"case" !"default" @Statement)* #SwitchCase }
	/ { "default" ":" (!"case" @Statement)* #SwitchDefault }
	/ { @Name ":" #Label }
	/ { @Expression ";" #ExpressionStatement }
	/ { #Empty } ";"


//Expression
//==========

Expression
	= AssignmentExpression {@ "," @AssignmentExpression #Expression }*

AssignmentExpression
	= { @UnaryExpression addAssignmentOperator @AssignmentExpression }
	/ ConditionalExpression

addAssignmentOperator
	= "="        #Assign
	/ "*="    #AssignMul
	/ "/="     #AssignDiv
	/ "%="     #AssignMod
	/ "+="    #AssignAdd
	/ "-="   #AssignSub
	/ "<<="    #AssignLeftShift
	/ ">>="   #AssignRightShift
	/ "&="     #AssignBitwiseAnd
	/ "^="     #AssignBitwiseXOr 
	/ "|="      #AssignBitwiseOr

ConstantExpression
	= ConditionalExpression
	
ConditionalExpression
	= LogicalORExpression {@ "?"  @Expression ":" @LogicalORExpression #Trinary }*

LogicalORExpression
	= LogicalANDExpression {@ "||" @LogicalANDExpression #Or }*

LogicalANDExpression
	= InclusiveORExpression {@ "&&" @InclusiveORExpression #And }*

InclusiveORExpression
	= ExclusiveORExpression {@ "|" @ExclusiveORExpression #BitwiseOr }*

ExclusiveORExpression
	= ANDExpression {@ "^" @ANDExpression #BitwiseXor }*

ANDExpression
	= EqualityExpression {@ "&" @EqualityExpression #BitwiseAnd }*

EqualityExpression
	= RelationalExpression {@ ( "==" #Equals / "!=" #NotEquals ) @RelationalExpression }*
	
RelationalExpression
	= ShiftExpression {@ ( "<=" #LessThanEquals / ">=" #GreaterThanEquals / "<" #LessThan / ">" #GreaterThan ) @ShiftExpression }*
	
ShiftExpression
	= AdditiveExpression {@ ( "<<" #LeftShift / ">>" #RightShift ) @AdditiveExpression }*
	
AdditiveExpression
	= MultiplicativeExpression {@ ( "+" #Add / "-" #Sub ) @MultiplicativeExpression }*
	
MultiplicativeExpression
	= CastExpression {@ ( "*" #Mul / "/" #Div / "%" #Mod ) @CastExpression }*

UnaryExpression
	= PostfixExpression
	/ { "++"    @UnaryExpression #PrefixInc }
	/ { "--"    @UnaryExpression #PrefixDec }
	/ { "&"    @CastExpression #Address }
	/ { "*"   @CastExpression #Star }
	/ { "+"   @CastExpression #Plus }
	/ { "-"  @CastExpression #Minus }
	/ { "~"  @CastExpression #Compl }
	/ { "!"   @CastExpression #Not }

CastExpression
	= { "(" @Type ")" @CastExpression #Cast }
	/ UnaryExpression

PostfixExpression
	= ( PrimaryExpression / { "(" @Type ")" "{" @{ (addInitializerList)* ","? #Initializer } "}" } ) 
	{@ (addFunctionCall / addIndex / addField / addInc / addDec) }*

addFunctionCall
	= @{ "(" addArgumentExpressionList? ")" #List} #Apply

addArgumentExpressionList
	= (@AssignmentExpression ("," @AssignmentExpression)*)

addIndex
	= "[" @Expression "]" #Index

addField
	= "." @Name #Field

addPointerField
	= "->" @Name #PointerField

addInc
	= "++" #Inc

addDec
	= "--" #Dec

PrimaryExpression
	= Constant
	/ CString
	/ "(" Expression ")"
	/ Name

LambdaExpression
	= { @LambdaParameters _ "->" @LambdaBody #LambdaExpression }

LambdaParameters
	= { @Name
		/ "(" (@addArgumentExpressionList)? _ ")"
		/ "(" @InferredFormalParameterList _ ")"
		 #LambdaParameters }

InferredFormalParameterList
	= { @Name ( _ "," @Name)* #InferredFormalParameterList }

LambdaBody
	= { @Expression / @Block #LambdaBody }


//Literal
//=======

Constant
	= CFloat
	/ CInteger
	/ CChar

CFloat
	= { ( DECIMAL_FLOAT / HEX_FLOAT )  #Float } FLOAT_SUFFIX? _

DECIMAL_FLOAT
	= FRACTION EXPONENT?
	/ DIGIT+ EXPONENT

FRACTION
	= DIGIT* '.' DIGIT+
	/ DIGIT+ '.'

EXPONENT
	= [eE] [+\-]? DIGIT+

HEX_FLOAT
	= HEX_PREFIX HEX_FRACTION BINARY_EXPONENT?
	/ HEX_PREFIX HEX+ BINARY_EXPONENT

HEX_PREFIX
	= '0' [xX]

HEX_FRACTION
	= HEX* '.' HEX+
	/ HEX+ '.'

BINARY_EXPONENT
	= [pP] [+\-]? DIGIT+

FLOAT_SUFFIX
	= [fFdD]

CInteger
	= { ( DECIMAL / HEXICAL / OCTAL ) #Integer } INT_SUFFIX? _

DECIMAL
	= [1-9] DIGIT*

HEXICAL
	= HEX_PREFIX HEX+

OCTAL
	= '0' [0-7]*

INT_SUFFIX
	= [uU] LONG_SUFFIX?
	/ LONG_SUFFIX [uU]?

LONG_SUFFIX
	= 'll'
	/ 'LL'
	/ [lL]

CString
	=  'L'? ('"' { STRING_CONTENT* #String } '"' _)+

CChar
	= 'L'? "'" { CHAR_CONTENT* #Character } "'" _

STRING_CONTENT
	= ESCAPE
	/ ![\"\n\\] .


CHAR_CONTENT
	= ESCAPE
	/ !['\n\\] .

ESCAPE
	= SIMPLE_ESCAPE
	/ OCTAL_ESCAPE
	/ HEX_ESCAPE
	/ UCHAR

SIMPLE_ESCAPE
	= '\\' ['\"?\\abfnrtv]
	
OCTAL_ESCAPE
	= '\\' [0-7] [0-7]? [0-7]?
	
HEX_ESCAPE
	= '\\x' HEX+
