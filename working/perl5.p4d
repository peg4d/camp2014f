/*

  PEG4d Perl5 Grammar

  Authors:
    Tetsuro Matsumura (https://github.com/tetsurom/)

*/

File
    = { (__ @SourceElement)* __ #Source }

Chunk
    = { (__ @SourceElement)* __ #Source }

SPACE
    = [\t\v\f \u00A0\uFEFF]

// Space including line terminator
__
    [example: /* comment*/]
    [example: //comment
]
    = (SPACE / LINE_TERMINATOR_SEQUENCE / COMMENT)*

// Space without line terminator
_
    = (SPACE / MULTI_LINE_COMMENT_SINGLE_LINE)*

LINE_TERMINATOR
    = [\n\r\u2028\u2029]

LINE_TERMINATOR_SEQUENCE
    = '\n' / '\r\n' / '\r'

COMMENT
    = MULTI_LINE_COMMENT / SINGLE_LINE_COMMENT

MULTI_LINE_COMMENT
    = '/*' (!'*/' .)* '*/'

MULTI_LINE_COMMENT_SINGLE_LINE
    = '/*' (!('*/' / LINE_TERMINATOR) .)* '*/'

SINGLE_LINE_COMMENT
    = '#' (!LINE_TERMINATOR .)*

Identifier
    = !KEYWORD IdentifierName

IdentifierName
    = { IDENTIFIER_START IDENTIFIER_PART* #Name }

IDENTIFIER_START
    = [a-zA-Z$_@]
    / UCHAR

IDENTIFIER_PART
    = IDENTIFIER_START
//    / UnicodeCombiningMark
    / DIGIT
//    / UnicodeConnectorPunctuation
//    / "\u200C"
//    / "\u200D"

W
  = [a-zA-Z0-9_]
  / UCHAR

UCHAR
  = '\\u' HEX4
  / '\\U' HEX4 HEX4

HEX4
  = HEX HEX HEX HEX

//DIGIT
//  = [0-9]

//Automatic Semicolon Insertion

EOS
    = __ ';'
    / _ &'}'
    / __ EOF

EOF
    = !.

//Operator
//==========

"&"   = '&' !'&'
"*"   = '*' !'='
"+"   = '+' ![+=]
"-"   = '-' !('-' / [=>])
"!"   = '!' !'='
":"    = ':' ![>]
"/"    = '/' !'='
"%"    = '%' ![=>]
"<<"  = '<<' !'='
">>"  = '>>' ![=>]
"<"    = '<' ![=]
">"    = '>' ![=]
"=="  = '==' ![=]
"!="  = '!=' ![=]
"^"    = '^' ![=]
"|"    = '|' ![=]
"="    = '=' ![=]
"break" = 'break' !W
"case" = 'case' !W
"catch" = 'catch' !W
"continue" = 'continue' !W
"debugger" = 'debugger' !W
"default" = 'default' !W
"delete" = 'delete' !W
"do" = 'do' !W
"else" = 'else' !W
"finally" = 'finally' !W
"for" = 'for' !W
"sub" = 'sub' !W
"if" = 'if' !W
"in" = 'in' !W
"instanceof" = 'instanceof' !W
"new" = 'new' !W
"return" = 'return' !W
"switch" = 'switch' !W
"this" = 'this' !W
"throw" = 'throw' !W
"try" = 'try' !W
"typeof" = 'typeof' !W
"my" = 'my' !W
"void" = 'void' !W
"while" = 'while' !W
"with" = 'with' !W
"class" = 'class' !W
"enum" = 'enum' !W
"export" = 'export' !W
"extends" = 'extends' !W
"import" = 'import' !W
"super" = 'super' !W
"implements" = 'implements' !W
"interface" = 'interface' !W
"let" = 'let' !W
"package" = 'package' !W
"private" = 'private' !W
"protected" = 'protected' !W
"public" = 'public' !W
"static" = 'static' !W
"yield" = 'yield' !W
"get" = 'get' !W
"set" = 'set' !W
"undefined" = 'undefined' !W
"null" = 'null' !W
"true" = 'true' !W
"false" = 'false' !W
"Infinity" = 'Infinity' !W
"NaN" = 'NaN' !W

KEYWORD
    = "break" / "case" / "catch" / "continue" / "debugger" / "default" / "delete" / "do"
    / "else" / "finally" / "for" / "sub" / "if" / "in" / "instanceof" / "new"
    / "return" / "switch" / "this" / "throw" / "try" / "typeof" / "my" / "void"
    / "while" / "with" / "class" / "enum" / "export" / "extends" / "import" / "super"
    / "implements" / "interface" / "let" / "package" / "private" / "protected" / "public"
    / "static" / "yield" / "null" / "true" / "false" / "Infinity" / "NaN"

//Expression
//==========

Untyped
    = { `Untyped` #Untyped }

ThisExpression
    = { "this" #This }

PrimaryExpression
    = ThisExpression
    / Identifier
    / Literal
    / ArrayLiteral
    / '(' __ Expression __ ')'

ArrayLiteral
    = {( '[' __ (addElisionList __)? ']'  
       / '[' __ addElementList __ ']'
       / '[' __ addElementList addArrayDelimitor __ ']' ) #Array }

addArrayDelimitor
    = __ ',' __ (addElisionList __)?

addElementList
    = (addElisionList __)? @AssignmentExpression ( addArrayDelimitor @AssignmentExpression )*

addElisionList
    = @ElisionExpression (__ @ElisionExpression)*

ElisionExpression
    = ',' { #Undefined }

ReceiverExpression
    = PrimaryExpression / FunctionExpression

MemberExpression
    = ReceiverExpression {@ __ addMemberOperator }*

addMemberOperator
    = '[' __ @Expression __ ']' #Index
    / '.' __ @IdentifierName #Field

CallExpression
    = MemberExpression {@ __ addCallOrMemberOperator }*

addCallOrMemberOperator
    = @Arguments #Apply
    / '[' __ @Expression __ ']' #Index
    / '->' __ @IdentifierName #Field

Arguments
    = { '(' __ (addArgumentList __)? ')' #List }

addArgumentList
    = @AssignmentExpression (__ ',' __ @AssignmentExpression)*

LeftHandSideExpression
    = CallExpression
 
PostfixExpression
    = { @LeftHandSideExpression _ addPostfixOperator }
    / LeftHandSideExpression

addPostfixOperator
    = "++" #SuffixInc / "--" #SuffixDec

PowerExpression
    = { @PostfixExpression __ "**" #Power __ @PowerExpression }
    / PostfixExpression

UnaryExpression
    = PostfixExpression / { addUnaryOperator _ @UnaryExpression }

addUnaryOperator
    = "++"     #PrefixInc
    / "--"     #PrefixDec
    / "+"      #Plus
    / "-"      #Minus
    / "~"      #BitwiseNot
    / "!"      #LogicalNot
    / "\\"     #Reference

MultiplicativeExpression
    = UnaryExpression {@ __ ( "*" #Mul / "/" #Div / "%" #Mod / "x" #Repeat) __ @UnaryExpression }*

AdditiveExpression
    = MultiplicativeExpression {@ __ ( "+" #Add / "-" #Sub / "." #Concat) __ @MultiplicativeExpression }*
  
ShiftExpression
    = AdditiveExpression {@ __ addShiftOperator __ @AdditiveExpression }*

addShiftOperator
    = "<<" #LeftShift 
    / ">>" #RightShift 

RelationalExpression
    = ShiftExpression {@ __ addRelationalOperator __ @ShiftExpression }?

addRelationalOperator
    = ("<=" / "le") #LessThanEquals
    / (">=" / "ge") #GreaterThanEquals
    / ("<" / "lt") #LessThan
    / (">" / "gt") #GreaterThan
  
EqualityExpression
    = RelationalExpression {@ __ addEqualityOperator __ @RelationalExpression }?

addEqualityOperator
    = ("==" / "eq") #Equals
    / ("!=" / "ne") #NotEquals
    / ("<=>" / "cmp") #Compare
    / "~~" #Unknown

BitwiseANDExpression
    = EqualityExpression {@ __ "&" __ @EqualityExpression #BitwiseAnd }*

BitwiseXORExpression
    = BitwiseANDExpression {@ __ "^" __ @BitwiseANDExpression #BitwiseXor }*

BitwiseORExpression
    = BitwiseXORExpression {@ __ "|" __ @BitwiseXORExpression #BitwiseOr }*

LogicalANDExpression
    = BitwiseORExpression {@ __ "&&" __ @BitwiseORExpression #LogicalAnd }*

LogicalORExpression
    = LogicalANDExpression {@ __ ("||" #LogicalOr / "//" #LogicalXor) __ @LogicalANDExpression }*

RangeExpression
    = LogicalORExpression {@ __ addRangeOperator __ @LogicalORExpression }?

addRangeOperator
    = ".." ( "." #OpenRange / #ClosedRange )

ConditionalExpression
    = RangeExpression {@ __ '?' __ @RangeExpression __ ':' __ @RangeExpression #Conditional }*

AssignmentExpression
    = { @LeftHandSideExpression __ addAssignmentOperator __ @AssignmentExpression }
    / ConditionalExpression

addAssignmentOperator
    = "="   #Assign
    / "*="  #AssignMul
    / "/="  #AssignDiv
    / "%="  #AssignMod
    / "+="  #AssignAdd
    / "-="  #AssignSub
    / "<<=" #AssignLeftShift
    / ">>=" #AssignRightShift
    / "&="  #AssignBitwiseAnd
    / "^="  #AssignBitwiseXOr 
    / "|="  #AssignBitwiseOr

CommaExpression
    = { @AssignmentExpression (__ (',' / '=>') __ @AssignmentExpression #Comma)* }

NatualANDExpression
    = CommaExpression {@ __ "and" __ @CommaExpression #LogicalAnd }*

NatualORExpression
    = NatualANDExpression {@ __ ("or" #LogicalOr / "xor" #LogicalXor) __ @NatualANDExpression }*

Expression
    = NatualORExpression

ListExpression
    = { '(' __ @AssignmentExpression (__ (',') __ @AssignmentExpression)* __ ')' #List }
    / { @AssignmentExpression (__ (',') __ @AssignmentExpression)* #List }

IdentifierList
    = { (@Identifier (__ ',' __ @Identifier)*)? #List }

//Statement
//==========

Statement
    = DecoratedStatement EOS

DecoratedStatement
    = { @[1]NotDecolatedStatement __ "if" __ @[0]Expression #If }
    / { @[1]NotDecolatedStatement __ "unless" __ @[0]Expression #Unless }
    / { @[1]NotDecolatedStatement __ "while" __ @[0]Expression #While }
    / { @[1]NotDecolatedStatement __ "until" __ @[0]Expression #Until }
    / { @[1]NotDecolatedStatement __ "when" __ @[0]Expression #When }
    / { @[3]NotDecolatedStatement __ ("foreach" / "for") __ @[1]Expression #Foreach }
    / NotDecolatedStatement

NotDecolatedStatement
    = Block
    / EmptyStatement
    / VariableStatement
    / IfStatement
    / UnlessStatement
    / WhileStatement
    / UntilStatement
    / ForStatement
    / ForEachStatement
    / NextStatement
    / BreakStatement
    / ReturnStatement
    / WithStatement
    / LabelledStatement
    / SwitchStatement
    / ThrowStatement
    / TryStatement
    / DebuggerStatement
    / ExpressionStatement

Block
    = FunctionBody

VariableStatement
    = { "my" __ @[2]VariableDeclarationList #VarDeclStmt }
    / { "my" __ '(' __ @IdentifierList __ ')' (__ "=" __ (@ListExpression / @Expression))? #VarDecl }
    //= { "my" __ @[2]VariableDeclarationList #VarDeclStmt }

VariableDeclarationList
    = { @VariableDeclaration (__ ',' __ @VariableDeclaration)* #List }

VariableDeclaration
    = { @Identifier (__ "=" __ @AssignmentExpression)? #VarDecl }

EmptyStatement
    = { ';' #Empty }

ExpressionStatement
    = !('{' / 'sub') Expression

IfStatement
    = { "if" __ addCondition __ @Block __
        (elseClause / elsifClause)? #If }

elsifClause
    = @{ "elsif" __ addCondition __ @Block
        (elseClause / elsifClause)? #If }

elseClause
    = "else" __ @Block

UnlessStatement
    = { "unless" __ addCondition __ @Block __
        (elseClause / elsifClause)? #Unless }

WhileStatement
    = { "while" __ addCondition __ @Block (__ "continue" __ @Block)? #While }

UntilStatement
    = { "until" __ addCondition __ @Block (__ "continue" __ @Block)? #Until }

addCondition
    = '(' __ @Expression __ ')'

ForStatement
    = { ("foreach" / "for") __ '(' __ addForStatementPart __ ')' __ @[3]Block #For }

addForStatementPart
    = "my" __ @[0]VariableDeclarationList __ ';' __ (@[1]Expression)? __ ';' __ (@[2]Expression)?
    / (@[0]Expression)? __ ';' __ (@[1]Expression)? __ ';' __ (@[2]Expression)?

ForEachStatement
    = { ("foreach" / "for") __ addForEachPart __ @Block #Foreach }

addForEachPart
    = "my" __ @VariableDeclarationList __ '(' __ @Expression __ ')'
    / @LeftHandSideExpression __ '(' __ @Expression __ ')'

NextStatement
    = { "next" (_ @Identifier)? #Continue }

BreakStatement
    = { "break" (_ @Identifier)? #Break }

ReturnStatement
    = { "return" (_ @Expression)? #Return }

WithStatement
    = { "with" __ addCondition __ @Statement #With }

SwitchStatement
    = { "switch" __ addCondition __ @CaseBlock #Switch }

CaseBlock
    = { '{' __ addCaseClauses? __ '}' #CaseBlock }

addCaseClauses
    = @CaseClause (__ @CaseClause)*

CaseClause
    = { "case" __ @Expression __ ':' __ (@Statement __)* #Case }
    / { "default" __ ':' __ (@Statement __)* #Default }

LabelledStatement
    = { @Identifier __ ':' __ @Statement #Label }

ThrowStatement
    = { "throw" _ @Expression #Throw }

TryStatement
    = { (  "try" __ @[0]Block __ @[1]Catch __ addFinally
         / "try" __ @[0]Block __ @[1]Catch
         / "try" __ @[0]Block __ addFinally ) #Try }

Catch
    = { @{ "catch" __ '(' __ @Identifier __ ')' __ @Block #Catch } #List }

addFinally
    = "finally" __ @[2]Block

DebuggerStatement
    = "debugger" EOS { #Debugger }

//Program
//==========

FunctionDeclaration
    = { "sub" __ @[2]Identifier __ @[6]FunctionBody #FuncDecl }

FunctionExpression
    = { "sub" __ (@[2]Identifier __)? __ @[6]FunctionBody #FuncDecl }

FormalParameterList
    = '(' __ { ( @Identifier (__ ',' __ @Identifier)* )? #List } __ ')'

FunctionBody
    = '{' { (__ @SourceElement)* #Block } __ '}'

SourceElement
    = FunctionDeclaration
    / Statement

//Literal
//==========
Literal
    = NullLiteral / BooleanLiteral / NumericLiteral / StringLiteral / RegularExpressionLiteral

NullLiteral
    [example: null]
    = { "null" #Null }

BooleanLiteral
    [example: true]
    = { "true" #True }
    / { "false" #False }

NumericLiteral
    [example: 0x1F]
    [example: 0123]
    [example: 0.12]
    [example: 1234]
    = HexIntegerLiteral / FloatingPointLiteral / OctaIntegerLiteral / DecimalIntegerLiteral / InfinityLiteral / NaNLiteral

DecimalIntegerLiteral
    [example: 123]
    = { DECIMAL_INTEGER #Integer }

OctaIntegerLiteral
    [example: 0]
    [example: 012]
    = { '0' OCT* #OctalInteger }

HexIntegerLiteral
    [example: 0xa12]
    = { '0' [xX] HEX* #HexInteger }

FloatingPointLiteral
    [example: 12.456]
    [example: 12.456e-78]
    [example: 0.12]
    [example: .12]
    [example: .12]
    [example: .12e3]
    [example: 5e3]
    = { DECIMAL_INTEGER? '.' DIGIT+ EXPONENT_PART? #Double }
    / { DECIMAL_INTEGER EXPONENT_PART #Double }

InfinityLiteral
    = { 'Infinity' #Double }

NaNLiteral
    = { 'NaN' #Double }

DECIMAL_INTEGER
    = [1-9] DIGIT* / "0"

EXPONENT_PART
    = [eE] SIGN? DECIMAL_INTEGER

OCT
    = [0-7]

SIGN
    = ( '+' / '-' )

SOURCE
    = .

StringLiteral
    = ["] { DOUBLE_STRING_CHARACTER* #String } ["]
    / ['] { SINGLE_STRING_CHARACTER* #String } [']

DOUBLE_STRING_CHARACTER
    = !( ["] / '\\' / LINE_TERMINATOR ) SOURCE / '\\' ESCAPE_SEQUENCE

SINGLE_STRING_CHARACTER
    = !( ['] / '\\' / LINE_TERMINATOR ) SOURCE / '\\' ESCAPE_SEQUENCE

ESCAPE_SEQUENCE
    = '\\' / ["'bfnrtv] / OCTA_ESCAPE_SEQUENCE / HEX_ESCAPE_SEQUENCE / UNICODE_ESCAPE_SEQUUENCE / LINE_TERMINATOR_SEQUENCE / .

OCTA_ESCAPE_SEQUENCE
    = OCT OCT OCT

HEX_ESCAPE_SEQUENCE
    = [xX] HEX HEX

UNICODE_ESCAPE_SEQUUENCE
    = [uU] HEX4

RegularExpressionLiteral
    [example: /.*(?=#[^\s]*$)/]
    = { '/' REGEX_BODY '/' REGEX_FLAGS #RegularExp }

REGEX_BODY
    = REGEX_FIRST_CHAR REGEX_CHAR*

REGEX_FIRST_CHAR
    = REGEX_BACKSLASH_SEQUENCE / ![*\\/\x5b] REGEX_NON_TERMINATOR / REGEX_CLASS

REGEX_CHAR
    = '*' / REGEX_FIRST_CHAR

REGEX_BACKSLASH_SEQUENCE
    = '\\' REGEX_NON_TERMINATOR

REGEX_NON_TERMINATOR
    = !LINE_TERMINATOR SOURCE

REGEX_CLASS
    = '[' REGEX_CLASS_CHAR* ']'

REGEX_CLASS_CHAR
    = ![\x5d\\] REGEX_NON_TERMINATOR / REGEX_BACKSLASH_SEQUENCE

REGEX_FLAGS
    = [gimsy]*
