// PEG4d Bash file

File
	[全体統合: 松村]
	= { (@Statement)* }

S
	= ([ \t\n\r] / COMMENT)

COMMENT
	= '#' (!BREAK .)*

BREAK
   = '\n' / '\r\n' / '\r'

NL
	= ';' / BREAK

W
	= [a-zA-Z0-9_]

NAME
	= W+

Statement
	= IfStatement
	/ WhileStatement
	/ UntilStatement
	/ ForStatement
	/ FunctionStatement
	/ CaseStatement
	/ DeclareStatement
	/ LetStatement
	/ Command

IfStatement	//田村
	= { 'if' 'test'? @Expression NL
		'then' NL
		@Block
		('elif' @Expression NL 'then' NL @Block)*
		('else' @Expression NL @Block)?
		'fi' NL #IfStatement }

ForStatement
	= { 'for' ( @Literal 'in' @Array / '((' @Expression NL @Expression NL @Expression '))' ) NL
        'do' NL
        @Block
        'done' NL #ForStatement }

FunctionStatement
	= { ( @FunctionDecl / @FunctionCall ) #functionStatement }
	
FunctionDecl
	= { 'function'? S* @FunctionName '()' S* '{' S* @Statement  S* '}' #functionDecl }

FunctionCall
	= { @FunctionName S* ArgList S* #functionCall }

FunctionName
	= { Name #functionName }

ArgList
	= ( @Arg S+ )+

Arg
	= { W #arg }

CaseStatement
	= { 'case'  S* Case #CaseStatement }
	
Case
	= @Variable S* 'in' S* CaseMember S*( CaseMember S*)* (LastCaseMember / 'esac' ) S*
	
CaseMember
	= ( @Expression ')' S* @Statement S* (@Statement S*)* ';;')
	
LastCaseMember
	= @Defualt S* ((@Statement) S*) ((( 'esac' / @Statement) S*)*) 
	
Defualt = { '*' #DefualtExpression } ')'

UntilStastement
	= { 'until' Expression NL
	   'do' NL
	   Block
	   'done' NL #Unitl}

DeclareStatement
	= { 'declare' S ( '-i' #Num / '-a' #Array ) S Name NL }
	/ { 'declare' S Name NL #String }

LetStatement
	= { 'let' S PostfixExpression S Name NL }
PostfixExpression
	= '++' #PrefixInc
	/ '--' #PrefixDec

Name
	= { NAME #Name } S*

// それ以外 田村 (全員調整) ただし、Command は関口

WhileStatement
	= { 'while' Expression NL
	    'do' NL
	    Block
	    'done' NL #WhileStatement }


Command
	= CommandExpr S? NL	// <new line>, ';', '&'

CommandExpr
	= { @CommandList S? @Background? #command }

Background
	= {'&' #background} S?

CommandList
	= OrList

OrList
	= AndList {@ S? '||' S? @AndList #or}*

AndList
	= PipedCommand {@ S? '&&' S? @PipedCommand #and}*

PipedCommand
	= SingleCommand {S? '|' S? @SingleCommand #pipe}*

SingleCommand
	= { @CmdSymbolSeq (S (@CommandArg / @Redirect))* #singleCommand}

Redirect
	= {@RedirectOpArgLess / @RedirectOp S? @CommandArg #redirect}

RedirectOp
	= {
		Number? '>>'
		/ Number? '>'
		/ '&>>'
		/ '&>'
		/ '<<<'	// here string
		/ '<'
	 #redirectOp }

RedirectOpArgLess
	= { Number '>&' Number #redirectOp }

Number
	= 0
	/ [1-9][0-9]*

CmdSymbolSeq
	= { @CmdSymbol+ #commandName }

CommandArg
	= { @CmdSymbol+ #commandArg }

CmdSymbol
	= SingleQuoteString
	/ DoubleQuoteString
	/ SubCmd
	/ SubExpr
	/ Identifier

SubCmd
	= '`' S? { @CommandExpr S? NL? #backquoteSubstitution } S? '`'
	/ '$(' S? { @CommandExpr S? NL? #substitution } S? ')'

SubExpr
	= '$' { @SubExprSuffix #subExpr}
	/ '${' { @VarName '[' @Index ']' #arraySubExpr} '}'
	/ '${' { @SubExprSuffix #subExpr} '}'

Index
	= Number / '@'

SubExprSuffix
	= VarName
	/ { '?' / '*' / '@' / '#' /Number #specialChar}

VarName
	= { '_' ('_' / Letter / Number)+ 
		/ Letter ('_' / Letter / Number)* #varName}

Letter
	= [a-zA-Z]+

Identifier	//TODO: utf8
	= { '$' / (EscapedChar / !ForbitChar . )+ #identifier}

ForbitChar
	= '\t' / ' ' / '\n' / '\r' / '{' / '}' / '(' / ')' 
	/ '!' / '`' / '\'' / '"' / '&' / '|' / '#' / '$' / '<' / '>'

EscapedChar
	= '\\' (ForbitChar / . )


Expression
	= 内田

Literal
	= 内田

Array
	= 石井

FilePath
	[example: /dir/file]
	[example: "dir name/file"]
	[example: dir\ name/file]
	[example: /dir/$file]
	= 森谷
